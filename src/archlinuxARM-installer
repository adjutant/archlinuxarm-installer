#!/bin/bash

##### Notes for developers.
##### 1. Because Bash doesn't support module import very well, I kept everything 
##### under this one file.
##### 2. To quickly jump around, search for these markers:
##### - "### " indicates a code block that should have been an imported module.
##### - "#### " indicates a submodule.
#####


### Sessions init and arguments capture.
# Very weird Bash structure here for getopts.  Keep as-is.  No touchy.
function _print_help_and_exit {
    echo -e "archlinuxARM-installer version 0.2 \n
`           `archlinuxARM-installer is the tool to install ArchLinuxARM \
`           `automatically \non supported devices.  It was designed primarily \
`           `to assist with the \ninstallation of ARM clusters. \n
`           `Usage: archlinuxARM-installer [OPTION] \n
`           `Options:
`           ` -h      print out this help message
`           ` -v      activate debug log (true/false)
`           ` -d      path to ArchLinuxARM image directory
`           ` -b      path to block device to be installed (/dev/sdX)
`           ` -m      board model name \n
`           `Supported devices:
`           ` notes: Device names are taken directly from their appropriate
`           `ArchLinuxARM.org page, with dash \"-\" replaced by \
`           `underscore \"_\".\n
`           `a10_olinuxino_lime         clearfog      odroid_x
`           `a20_olinuxino_lime         cubieboard    odroid_x2
`           `a20_olinuxino_lime2        cubieboard_2  odroid_xu
`           `a20_olinuxino_micro        cubietruck    odroid_xu3
`           `beagleboard                cubox_i       odroid_xu4
`           `beagleboard_xm             odroid_c1     pandaboard
`           `beaglebone                 odroid_c2     pcduino3
`           `beaglebone_black           odroid_hc1    raspberry_pi
`           `beaglebone_black_wireless  odroid_hc2    raspberry_pi_2
`           `beaglebone_green           odroid_u2     raspberry_pi_3
`           `beaglebone_green_wireless  odroid_u3 \n"
    exit 2
}


while getopts "hl:d:b:m:" opt; do
    # "hvd:b:m:" is Bash majik. The following ": seems to means
    # that the parameter requires an argument.
    case "${opt}" in
        h)
            _print_help_and_exit
            ;;
        l)
            case "${OPTARG}" in
                "info"|"INFO"|"warning"|"WARNING"|\
                "error"|"ERROR"|"debug"|"DEBUG")
                    log_level="${OPTARG}"
                    ;;
                *)
                    echo "Log level ${OPTARG} not recognized. Set to INFO."
                    log_level="INFO"
            esac
            ;;
        b)
            install_disk="${OPTARG}"
            required_parameter_check[0]="b"
            ;;
        d)
            img_path="${OPTARG}"
            required_parameter_check[1]="d"
            ;;
        m)
            board_model="${OPTARG}"
            required_parameter_check[2]="m"
            ;;
        \?)
            echo "Unsupported argument chosen: -${OPTARG}" >&2
            _print_help_and_exit
            ;;
    esac
done


if [ "${required_parameter_check[*]}" != "b d m" ]; then
    echo -e "All 3 parameters -b, -d, -m are required. \n"
    _print_help_and_exit
fi

`
session_id=$(< /dev/urandom tr -dc 0-9 | head -c6)
mount_path="/mnt/.alARM_install_${session_id}"
###


### Logging functions
function current_timestamp {
    $(which date) +"%d-%m-%Y, %H:%M:%S"
}


function logger {
    ## Take 2 positional arguments.
    ## ${1} for loglevel: debug, info, warning, error
    ## ${2} for log messages
    ##
    ## ${1} ${2} MUST always be wrapped in double quotes.
    ## Logging event at level ERROR will cause the program to exit.
    case "${log_level}" in
        "debug"|"DEBUG")
            log_level_num=10
            ;;
        "info"|"INFO")
            log_level_num=20
            ;;
        "warning"|"WARNING")
            log_level_num=30
            ;;
        "error"|"ERROR")
            log_level_num=40
            ;;
    esac

    case "${1}" in
        "debug"|"DEBUG")
            if [ ${log_level_num} <= 10 ]; then
                echo "[$(current_timestamp)] DEBUG: ${2}"
            fi
            ;;
        "info"|"INFO")
            if [ ${log_level_num} <= 20 ]; then
                echo "[$(current_timestamp)] INFO: ${2}"
            fi
            ;;
        "warning"|"WARNING")
            if [ ${log_level_num} <= 30 ]; then
                echo "[$(current_timestamp)] WARNING: ${2}"
            fi
            ;;
        "error"|"ERROR")
            if [ ${log_level_num} <= 40 ]; then
                echo "[$(current_timestamp)] ERROR: ${2}"
            fi
            exit 1
            ;;
    esac
}


function logging_debug {
    ## Take 1 positional argument.
    ## ${1} for log message.
    logger "DEBUG" ${1}
}


function logging_info {
    ## Take 1 positional argument.
    ## ${1} for log message.
    logger "INFO" "${1}"
}


function logging_warning {
    ## Take 1 positional argument.
    ## ${1} for log message.
    logger "WARNING" ${1}
}


function logging_error {
    ## Take 1 positional argument.
    ## ${1} for log message.
    ##
    ## This function will cause the program to exit.
    logger "ERROR" ${1}
}
###


### Downloading functions.
function download {
    ## Wrap wget for desired behaviours.
    ## Take 1 positional parameter.
    ## ${1} for download URL *suffix*.
    url_prefix="http://os.archlinuxarm.org/os"
    url="${url_prefix}/${1}"
    wget -q -xnH --cut-dirs=1 --show-progress --progress=bar "${url}"
}
###


### Templating functions
#### Disk templates
function _dt_1p_secdefault_ext4 {
    ## Template description:
    ##  - One partition.
    ##  - First sector deafault (most likely 2048). Filesystem ext4.
    ##
    ## NOTE: This function requires sudo.
    (echo o; \
     echo n; echo p; echo 1; echo ; echo ;
     echo w) \
    | fdisk ${install_disk} > /dev/null 2>&1
    logging_info "Formated ${install_disk} using one partition template"

    mkfs.ext4 -F "${install_disk}1" > /dev/null 2>&1
    # mkfs.ext4 -F "${install_disk}1" -O ^metadata_csum,^64bit > /dev/null 2>&1
    # why?
    mkdir -p "${mount_path}/root"
    mount "${install_disk}1" "${mount_path}/root"
    logging_info "Created filesystem & mounted ${1}1 to ${mount_path}/root"
}


function _dt_1p_sec2048_ext4 {
    ## Template description:
    ##  - One partition.
    ##  - First sector 2048. Filesystem ext4.
    ##
    ## NOTE: This function requires sudo.
    (echo o; \
     echo n; echo p; echo 1; echo 2048; echo ;
     echo w) \
    | fdisk ${install_disk} > /dev/null 2>&1
    logging_info "Formated ${install_disk} using one partition template"

    mkfs.ext4 -F "${install_disk}1" > /dev/null 2>&1
    mkdir -p "${mount_path}/root"
    mount "${install_disk}1" "${mount_path}/root"
    logging_info "Created filesystem & mounted ${1}1 to ${mount_path}/root"
}


function _dt_1p_sec4096_ext4 {
    ## Template description:
    ##  - One partition.
    ##  - First sector 4096. Filesystem ext4.
    ##
    ## NOTE: This function requires sudo.
    (echo o; \
     echo n; echo p; echo 1; echo 4096; echo ; \
     echo w) \
    | fdisk ${install_disk} > /dev/null 2>&1
    logging_info "Formated ${install_disk} using one partition template"

    mkfs.ext4 -F "${install_disk}1" > /dev/null 2>&1
    mkdir -p "${mount_path}/root"
    mount "${install_disk}1" "${mount_path}/root"
    logging_info "Created filesystem & mounted ${install_disk}1 to \
`                `${mount_path}/root"
}


function _dt_2p_secdefault_vfat_sec100M_ext4 {
    ## Template description:
    ##  - Two partitions.
    ##  - First sector default (most likely 2048). Filesystem vfat.
    ##  - Second sector +100MB. Filesystem ext4.
    ##
    ## NOTE: This function requires sudo.
    (echo o; \
     echo n; echo p; echo 1; echo ; echo "+100M"; echo t; echo c; \
     echo n; echo p; echo 2; echo ; echo ; \
     echo w) \
    | fdisk ${install_disk} > /dev/null 2>&1
    logging_info "Formated ${install_disk} using two partitions template"

    mkfs.vfat "${install_disk}1" > /dev/null 2>&1
    mkdir -p "${mount_path}/boot"
    mount "${install_disk}1" "${mount_path}/boot"
    logging_info "Created filesystem & mounted ${install_disk}1 to \
`                `${mount_path}/boot"

    mkfs.ext4 -F "${install_disk}2" > /dev/null 2>&1
    mkdir -p "${mount_path}/root"
    mount "${install_disk}2" "${mount_path}/root"
    logging_info "Created filesystem & mounted ${install_disk}2 to \
`                `${mount_path}/root"
}


function _dt_2p_sec63_vfat16_sec100M_ext4 {
    ## Template description:
    ##  - Two partitions.
    ##  - First sector 63. Filesystem vfat16.
    ##  - Second sector +100MB. Filesystem ext4.
    ##
    ## NOTE: This function requires sudo.
    (echo o; echo c; \
     echo n; echo p; echo 1; echo 63; echo "+100M"; echo t; echo c; echo a; \
     echo n; echo p; echo 2; echo ; echo ; \
     echo w) \
    | fdisk ${install_disk} > /dev/null 2>&1
    logging_info "Formated ${install_disk} using two partitions template"

    mkfs.vfat -F 16 "${install_disk}1" > /dev/null 2>&1
    mkdir -p "${mount_path}/boot"
    mount "${install_disk}1" "${mount_path}/boot"
    logging_info "Created filesystem & mounted ${install_disk}1 to \
`                `${mount_path}/boot"

    mkfs.ext4 -F "${install_disk}2" > /dev/null 2>&1
    mkdir -p "${mount_path}/root"
    mount "${install_disk}2" "${mount_path}/root"
    logging_info "Created filesystem & mounted ${install_disk}2 to \
`                `${mount_path}/root"
}
####


#### Post install template
function _pit_raspberry_pi {
    mv "${mount_path}/root/boot/*" "${mount_path}/boot/"
    logging_info "Set up bootloader for ${board_model}"
    sync
}


function _pit_armv7 {
    dd if="${img_path}/sunxi/boot/${board_model}/u-boot-sunxi-with-spl.bin" \
        of="${install_disk}" bs=1024 seek=8 status=none
    cp "${img_path}/sunxi/boot/${board_model}/boot.scr" \
        "${mount_path}/root/boot/boot.scr"
    logging_info "Set up bootloader for ${board_model}"
    sync
}


function _pit_odroid {
    sh "${mount_path}"/root/boot/sd_fusing.sh "${install_disk}"
    logging_info "Set up bootloader for ${board_model}"
    sync
}


function _pit_cubox_i {
    dd if="${mount_path}"/root/boot/SPL of=/dev/sdX bs=1K seek=1
    dd if="${mount_path}"/root/boot/u-boot.img of=/dev/sdX bs=1K seek=69
    logging_info "Set up bootloader for ${board_model}"
    sync
}


function _pit_beagleboard {
    mv "${mount_path}"/root/boot/* "${mount_path}/boot/"
    cp "${img_path}"/omap/boot/beagleboard/MLO \
       "${img_path}"/omap/boot/beagleboard/u-boot.img "${mount_path}/boot/"
    echo "/dev/mmcblk0p1  /boot  vfat  defaults  0 0" >> /etc/fstab
    logging_info "Set up bootloader for ${board_model}"
    sync
}


function _pit_beaglebone {
    dd if="${mount_path}"root/boot/MLO \
        of="${install_disk}" count=1 seek=1 conv=notrunc bs=128k
    dd if="${mount_path}"root/boot/u-boot.img \
        of="${install_disk}" count=2 seek=1 conv=notrunc bs=384k
    logging_info "Set up bootloader for ${board_model}"
    sync
}


function _pit_pandaboard {
    dd if="${img_path}"/omap/boot/pandaboard/MLO \
        of="${install_disk}" count=1 seek=1 conv=notrunc bs=128k
    dd if="${img_path}"/omap/boot/pandaboard/u-boot.img \
        of="${install_disk}" count=2 seek=1 conv=notrunc bs=384k
    cp "${img_path}/omap/boot/pandaboard/boot.scr" \
        "${mount_path}/root/boot/boot.scr"
    logging_info "Set up bootloader for ${board_model}"
    sync
}
####
###


### Main logical functions.
function prepare_env {
    case ${board_model} in
        "raspberry_pi")
            export img_name="ArchLinuxARM-rpi-latest.tar.gz"
            export disk_template="2p_secdefault_vfat_sec100M_ext4"
            export post_install_template="raspberry_pi"
            ;;
        "a10_olinuxino_lime"|"a20_olinuxino_lime"|\
        "a20_olinuxino_lime2"|"a20_olinuxino_micro"|\
        "cubieboard"|"cubieboard_2"|"cubietruck"|"pcduino3")
            export img_name="ArchLinuxARM-armv7-latest.tar.gz"
            export disk_template="1p_sec2048_ext4"
            export post_install_template="armv7"
            ;;
        "odroid_c1")
            export img_name="ArchLinuxARM-odroid-c1-latest.tar.gz"
            export disk_template="1p_secdefault_ext4"
            export post_install_template="odroid"
            ;;
        "raspberry_pi_2"|"raspberry_pi_3")
            export img_name="ArchLinuxARM-rpi-2-latest.tar.gz"
            export disk_template="2p_secdefault_vfat_sec100M_ext4"
            export post_install_template="raspberry_pi"
            ;;
        "cubox_i")
            export img_name="ArchLinuxARM-imx6-cubox-latest.tar.gz"
            export disk_template="1p_secdefault_ext4"
            export post_install_template="cubox_i"
            ;;
        "clearfog")
            export img_name="ArchLinuxARM-clearfog-latest.tar.gz"
            export disk_template="1p_secdefault_ext4"
            export post_install_template="odroid"
            ;;
        "odroid_u2"|"odroid_u3"|"odroid_x2")
            export img_name="ArchLinuxARM-odroid-latest.tar.gz"
            export disk_template="1p_sec4096_ext4"
            export post_install_template="odroid"
            ;;
        "odroid_x")
            export img_name="ArchLinuxARM-odroid-x-latest.tar.gz"
            export disk_template="1p_sec4096_ext4"
            export post_install_template="odroid"
            ;;
        "odroid_hc1"|"odroid_hc2"|"odroid_xu3"|"odroid_xu4")
            export img_name="ArchLinuxARM-odroid-xu3-latest.tar.gz"
            export disk_template="1p_sec4096_ext4"
            export post_install_template="odroid"
            ;;
        "odroid_xu")
            export img_name="ArchLinuxARM-odroid-xu3-latest.tar.gz"
            export disk_template="1p_sec4096_ext4"
            export post_install_template="raspberry_pi"
            ;;
        "beagleboard"|"beagleboard_xm")
            export img_name="ArchLinuxARM-armv7-latest.tar.gz"
            export disk_template="2p_sec63_vfat16_sec100M_ext4"
            export post_install_template="beagleboard"
            ;;
        "beaglebone"|"beaglebone_black"|"beaglebone_black_wireless"|\
        "beaglebone_green"|"beaglebone_green_wireless")
            export img_name="ArchLinuxARM-am33x-latest.tar.gz"
            export disk_template="1p_sec2048_ext4"
            export post_install_template="beaglebone"
            ;;
        "odroid_c2")
            export img_name="ArchLinuxARM-odroid-c2-latest.tar.gz"
            export disk_template="1p_secdefault_ext4"
            export post_install_template="odroid"
            ;;
        "pandaboard")
            export img_name="ArchLinuxARM-armv7-latest.tar.gz"
            export disk_template="1p_sec2048_ext4"
            export post_install_template="pandaboard"
            ;;
        *)
            logging_error "Board model ${board_model} not supported"
    esac
    export img="${img_path}/${img_name}"
}

function post_install {
    _pit_${post_install_template}
    # I know, I know, metaprogramming sucks.

    umount "${mount_path}/boot" > /dev/null 2>&1
    umount "${mount_path}/root" > /dev/null 2>&1
    rmdir "${mount_path}/boot" > /dev/null 2>&1
    rmdir "${mount_path}/root" > /dev/null 2>&1
    rmdir "${mount_path}" > /dev/null 2>&1
    logging_info "Cleaned up ${mount_path}"
}

function install {
    logging_debug "Extracting ${img} to ${mount_path}/root"
    bsdtar -xpf "${img}" -C "${mount_path}/root"
    logging_info "Extracted ${img} to ${mount_path}/root"
    sync
}

function format_disk {
    ## Wipe the begining of disk with zeroes.
    ## Then format with chosen template.
    ##
    ## NOTE: This function requires sudo.

    dd if=/dev/zero of="${install_disk}" bs=1M count=8 status=none
    logging_info "Wiped out ${install_disk} with /dev/zero"

    case "${disk_template}" in
        "1p_secdefault_ext4")
            _dt_1p_secdefault_ext4
            ;;
        "1p_sec2048_ext4")
            _dt_1p_sec2048_ext4
            ;;
        "1p_sec4096_ext4")
            _dt_1p_sec4096_ext4
            ;;
        "2p_secdefault_vfat_sec100M_ext4")
            _dt_2p_secdefault_vfat_sec100M_ext4
            ;;
        "2p_sec63_vfat16_sec100M_ext4")
            _dt_2p_sec63_vfat16_sec100M_ext4
            ;;
        *)
            logging_error "Unknown disk template ${disk_template}"
}

### Main Function.
function main {
    prepare_env
    format_disk
    install
    post_install
}


main

exit 0
